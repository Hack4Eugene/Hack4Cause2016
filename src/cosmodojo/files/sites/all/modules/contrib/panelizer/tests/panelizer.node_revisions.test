<?php
/**
 * @file
 * Test the node revisions functionality for Panelizer.
 */

/**
 * Verifies Panelizer configuration options for node revisions.
 */
class PanelizerNodeRevisionTest extends PanelizerTestHelper {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Panelizer node revision tests',
      'description' => 'Test panelizer customization in node revisions.',
      'group' => 'Panelizer',
      'dependencies' => array('ctools', 'panels'),
    );
  }

  /**
   * {@inheritdoc}
   */
  function setUp(array $modules = array()) {
    parent::setUp();

    $perms = array(
      'create page content',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'use page manager',
      'administer panelizer',
    );
    $web_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($web_user);
  }

  /**
   * Tests different displays for different node revisions
   */
  function testPageAlterDisplayOnNewRevision() {
    // Panelize "Basic page" content type and the 'default' display.
    $edit = array();
    $edit['panelizer[status]'] = TRUE;
    $edit['panelizer[view modes][default][status]'] = TRUE;
    $edit['panelizer[view modes][default][default]'] = TRUE;
    $edit['panelizer[view modes][default][choice]'] = TRUE;
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
    $this->assertResponse(200);

    // Clone the default display.
    $this->drupalGet('admin/structure/types/manage/page/panelizer/default/node:page:default:default/clone');
    $this->assertResponse(200);
    $this->assertText(t('Name'));
    $this->assertFieldById('edit-title', "Clone of Default", "Administrative Title");

    // Manually set the machine name here as it's normally set by
    // machine-name.js, which doesn't work via SimpleTest.
    $this->drupalPost(NULL, array('name' => 'clone_of_default'), t('Save'));
    $this->assertResponse(200);
    // Confirm the status message.
    $this->assertText(t('!item has been created.', array('!item' => 'node:page:clone_of_default:default')));

    // Set a custom css class to identify this cloned display.
    $edit = array();
    $clone_css_class = 'panelizer-test-page-node-revisions-clone';
    $edit['css_class'] = $clone_css_class;
    $this->drupalPost('admin/structure/types/manage/page/panelizer/default/node:page:clone_of_default:default/settings', $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertText(t('The settings have been updated.'));

    // Assert panel choice for new pages.
    $this->drupalGet('node/add/page');
    $this->assertField('panelizer[default][name]', 'Display can be chosen on new page form');

    // Create a node with default panelizer display.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["body[$langcode][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->assertResponse(200);

    // Check that the post can be panelized.
    $node = $this->drupalGetNodeByTitle($edit["title"]);
    $this->assertLink('Customize display', 0, 'The customize display link appears on the page');
    $this->assertLinkByHref('node/' . $node->nid . '/panelizer', 0, 'A link to customize the node appears on the page');

    // Assert panel choice for existing pages.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse(200);
    $this->assertField('panelizer[default][name]', 'Display can be chosen on edit page form');

    // Create a new revision with a different display.
    $langcode = LANGUAGE_NONE;
    $edit["revision"] = 1;
    $edit["log"] = "Changed panelizer display in a revision";
    $edit["panelizer[default][name]"] = 'node:page:clone_of_default:default';
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertLink(t('Revisions'), 0, 'The node has multiple revisions');

    // Check that the new revision is rendered using the cloned display.
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_css_class));
    $this->assertEqual(count($elements), 1, 'The node is using the cloned display.');

    // Confirm that the revisions tab is now available.
    $this->drupalGet('node/' . $node->nid . '/revisions');
    $this->assertResponse(200);

    // Check that the old revision is still using the default display.
    $revisions = node_revision_list($node);
    $oldest_revision = array_pop($revisions);
    $this->assertNotNull($oldest_revision->vid);
    $this->drupalGet('node/' . $node->nid . '/revisions/' . $oldest_revision->vid . '/view');
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_css_class));
    $this->assertEqual(count($elements), 0, 'The node revision is not using the cloned display.');
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    $this->assertEqual(count($elements), 1, 'The node is using the default display.');

    // Clone the cloned display.
    $this->drupalGet('admin/structure/types/manage/page/panelizer/default/node:page:clone_of_default:default/clone');
    $this->assertResponse(200);
    $this->assertText(t('Name'));
    $this->assertFieldById('edit-title', "Clone of Clone of Default", "Administrative Title");

    // Manually set the machine name here as it's normally set by
    // machine-name.js, which doesn't work via SimpleTest.
    $this->drupalPost(NULL, array('name' => 'clone_of_clone_of_default'), t('Save'));
    $this->assertResponse(200);
    $this->assertText(t('!item has been created.', array('!item' => 'node:page:clone_of_clone_of_default:default')));

    // Set a custom css class to identify this cloned display.
    $edit = array();
    $clone_of_clone_css_class = 'panelizer-test-page-node-revisions-cloned-clone';
    $edit['css_class'] = $clone_of_clone_css_class;
    $this->drupalPost('admin/structure/types/manage/page/panelizer/default/node:page:clone_of_clone_of_default:default/settings', $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertText(t('The settings have been updated.'));

    // Create a new revision with another different display.
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['title'] = $node->title;
    $edit["body[$langcode][0][value]"] = $node->body[$langcode][0]["value"];
    $edit["revision"] = 1;
    $edit["log"] = "Changed panelizer display in another revision";
    $edit["panelizer[default][name]"] = 'node:page:clone_of_clone_of_default:default';
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);

    // Check that the new revision is rendered using the cloned display.
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_of_clone_css_class));
    $this->assertEqual(count($elements), 1, 'The node is using the cloned display.');

    // Check that the oldest revision is still using the default display.
    $revisions = node_revision_list($node);
    $this->assertEqual(count($revisions), 3, "The node has one published and two former revisions");
    $oldest_revision = array_pop($revisions);
    $this->assertNotNull($oldest_revision->vid);
    $this->drupalGet('node/' . $node->nid . '/revisions/' . $oldest_revision->vid . '/view');
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_of_clone_css_class));
    $this->assertEqual(count($elements), 0, 'The node revision is NOT using the clone of cloned display.');
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_css_class));
    $this->assertEqual(count($elements), 0, 'The node revision is NOT using the cloned display.');
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    $this->assertEqual(count($elements), 1, 'The node revision is using the default display.');

    // Check that the previous revision is still using the original cloned
    // display.
    $previous_revision = array_pop($revisions);
    $this->assertNotNull($previous_revision->vid);
    $this->drupalGet('node/' . $node->nid . '/revisions/' . $previous_revision->vid . '/view');
    $this->assertResponse(200);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_of_clone_css_class));
    $this->assertEqual(count($elements), 0, 'The node revision is NOT using the clone of cloned display.');
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => $clone_css_class));
    $this->assertEqual(count($elements), 1, 'The node revision is using the default display.');
  }

}
